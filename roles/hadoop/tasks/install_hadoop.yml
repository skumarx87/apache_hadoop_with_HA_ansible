- name: Checking hadoop already installed or not
  stat:
    path: "{{ bigdata_new_release_dir }}/hadoop-{{ hadoop_version }}"
  register: hadoop_installed_status

- name: Checking Java Installed or not
  command: "{{ java_home }}/bin/java -version"
  register: java_result
  ignore_errors: False

- name: Display all variables/facts known for a host
  debug:
    msg: "{% if hadoop_installed_status.stat.exists %} Hadoop is already installed {% else %} Hadoop not installed {% endif %}"

- name: Check hadoop archive file exist
  stat:
    path: "{{ tmp_dir }}/{{ hadoop_file }}"
  register: hadoop_download_file
  when: not hadoop_installed_status.stat.exists

- name: Creates directory
  file:
    path: "{{ item }}"
    state: directory
  register: dir_creation_status
  when: not hadoop_installed_status.stat.exists
  with_items:
     - "{{ tmp_dir }}"
     - "{{ tmp_dir_cache }}"
     - "{{ tmp_dir_cache }}"
     - "{{ bigdata_dir }}"
     - "{{ bigdata_env_dir }}"
     - "{{ bigdata_new_release_dir }}"

- name: Transfer Hadoop binaries
  copy: src={{ tmp_dir }}/{{ hadoop_file }} dest={{ tmp_dir_cache }}/{{ hadoop_file }}
  when: not hadoop_installed_status.stat.exists


- name: "Moving Files workspace"
  command: mv {{ tmp_dir_cache }}/{{ hadoop_file }} {{ tmp_dir }}/{{ hadoop_file }}
  when: not hadoop_installed_status.stat.exists

- name: Unzip Hadoop
  shell: "tar zxf {{ tmp_dir }}/{{ hadoop_file }} -C {{ bigdata_new_release_dir }}"
  when: not hadoop_installed_status.stat.exists

- name: "Creating hadoop Env soft link"
  file:
   src: "{{ bigdata_new_release_dir }}/hadoop-{{ hadoop_version }}"
   dest: "{{ bigdata_env_dir }}/hadoop"
   state: link  
#  when: not hadoop_installed_status.stat.exists

- name: Setting-up Executable permissions to bin/sbin folders
  file:
    path: "{{ item }}"
    state: directory
    mode: 0775
    recurse: yes
  register: dir_creation_status
  with_items:
     - "{{ bigdata_env_dir }}/hadoop/bin"
     - "{{ bigdata_env_dir }}/hadoop/sbin"
